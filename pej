#!/usr/bin/env python
# pylint: disable=too-many-lines
import datetime
import os
import sys
import functools

from enforce_typing import enforce_types

from helperfuncs import * #tools from predict-eth repo
from ocean_lib.models.datatoken import Datatoken
from oceanutil import * #tools from df-py repo

CHAINID = 137 # Polygon mainnet - where submissions are

# ========================================================================
HELP_MAIN = f"""predict-eth-judge

Usage: pej getentries|getpreds|getnmses

  pej getentries ST FIN CSV_DIR - query chain, output 1 entries.csv
  pej getpreds CSV_DIR - from 1 entries.csv, output N predvals_DTADDRX.csv
  pej getnmses CSV_DIR - from N predvals_DTADDRX.csv, output 1 nmses.csv

  pej getdid DT_ADDR - from datatoken address, output did
"""


@enforce_types
def do_help():
    print(HELP_MAIN)
    sys.exit(0)


# ========================================================================
@enforce_types
def do_getentries():
    HELP = f"""query chain, output entries.csv, which holds datatoken addrs

Usage: pej getentries ST FIN CSV_DIR
  ST -- first block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM
  FIN -- last block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM | latest
  CSV_DIR -- output dir for entries.csv
"""
    if len(sys.argv) not in [2 + 3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getentries"
    ST, FIN = sys.argv[2], sys.argv[3]
    CSV_DIR = sys.argv[4]
    print("pej getentries: Begin")
    print(f"Args: ST={ST}, FIN={FIN}, CSV_DIR={CSV_DIR}")

    # create dir if not exists
    _createDirIfNeeded(CSV_DIR)
    entries_file_name = _entriesCsvFilename(CSV_DIR)
    _exitIfFileExists(entries_file_name)

    # main work
    
    # rng = blockrange.create_range(chain, ST, FIN, NSAMP, SECRET_SEED)
    print("NOTE: this is currently hardcoded, it doesn't actually query")

    # transactions that shared token to judges:
    # https://polygonscan.com/address/0xA54ABd42b11B7C97538CAD7C6A2820419ddF703E#tokentxns

    # hardcoded entries for Web3 ATL hackathon, due Nov 6 2022
    # (manually entered via copy & paste from polygonscan)
    DT_addrs = [
        "0xdf2857f2f9f1f2a227ca0f00c20190ff7d7a05a0",
	"0x277475e34ce4f787d8c3b1dca98c6407470407a3",
	]
    
    #
    save_list(entries_file_name)

    print(f"pej getentries: Done. There were {len(DT_addrs)} entries")


# ========================================================================


@enforce_types
def do_getpreds():
    HELP = f"""from 1 entries.csv, output predvals_DTADDRX.csv

Usage: pej getpreds CSV_DIR
    CSV_DIR -- input & output dir

Transactions are signed with envvar `REMOTE_TEST_PRIVATE_KEY1`, having address `0xA54ABd42b11B7C97538CAD7C6A2820419ddF703E`
"""
    if len(sys.argv) not in [2 + 1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getpreds"
    CSV_DIR = sys.argv[2]
    
    print("pej getpreds: Begin")
    print(f"Args: CSV_DIR={CSV_DIR}")

    # check dir
    if not os.path.exists(CSV_DIR):
        print(f"\nDirectory {CSV_DIR} doesn't exist. Exiting.")
        sys.exit(0)
	
    entries_file_name = _entriesCsvFilename(CSV_DIR)
    if not os.path.exists(entries_file_name):
        print(f"\n File {entries_file_name} doesn't exist. Exiting.")
        sys.exit(0)

    #main work
    ocean = create_ocean_instance()
    alice_wallet = create_alice_wallet(ocean) #you're Alice
    
    DT_addrs = load_list(entries_file_name)
    n = len(DT_addrs)
    print(f"Loaded {n} DT addrs.")
    
    for i, DT_addr in enumerate(DT_addrs):
        print(f"DT #{i+1}/{n}: begin. DT_addr={DT_addr}")
        did = calcDID(DT_addr, CHAINID)
        old_pred_name = ocean.assets.download_file(did, alice_wallet)
        new_pred_name = os.path.join(CSV_DIR, f"predvals_DT_{DT_addr}.csv")
        shutil.copyfile(old_pred_name, new_pred_name)
        
        print(f"Entry #{i+1}/{n}: done")

    print("pej getpreds: Done")


# ========================================================================


@enforce_types
def do_getnmses():
    HELP = f"""From N predvals_DTADDRX.csv, output 1 nmses.csv

Usage: pej getnmses CSV_DIR
  CSV_DIR -- input & output dir
"""
    if len(sys.argv) not in [2+1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getnmses"
    CSV_DIR = sys.argv[2]
    
    print("pej getnmses: Begin")
    print(f"Args: CSV_DIR={CSV_DIR}")

    # check dir
    if not os.path.exists(CSV_DIR):
        print(f"\nDirectory {CSV_DIR} doesn't exist; nor do pred'ns. Exiting.")
        sys.exit(0)
    
    # main work
    print("FIXME: do main work")

    # #get actual ETH values (final)
    # ETH_USDT_did = "did:op:0dac5eb4965fb2b485181671adbf3a23b0133abf71d2775eda8043e8efc92d19"
    # file_name = ocean.assets.download_file(ETH_USDT_did, alice_wallet)
    # allcex_uts, allcex_vals = load_from_ohlc_data(file_name)
    # print_datetime_info("CEX data info", allcex_uts)

    # start_dt = datetime.datetime(2022, 12, 12, 1, 00) #Dec 12, 2022 at 1:00am UTC
    # target_uts = target_12h_unixtimes(start_dt)
    # print_datetime_info("target times", target_uts)

    # cex_vals = filter_to_target_uts(target_uts, allcex_uts, allcex_vals)

    # #calc nmse, plot
    # nmse = calc_nmse(cex_vals, pred_vals)
    # print(f"NMSE = {nmse}")
    # plot_prices(cex_vals, pred_vals)
    

    print("pej getnmses: Done")




@enforce_types
def do_getdid():
    HELP = f"""From datatoken address, output did

Usage: pej getdid DT_ADDR
  DT_ADDR -- datatoken address
"""
    if len(sys.argv) not in [2+1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getdid"
    DT_ADDR = sys.argv[2]
        
    # main work
    ocean = create_ocean_instance()
    DT_ADDR = ocean.web3.toChecksumAddress(DT_ADDR)
    print(f"\n=Given=\ndt_addr: {DT_ADDR}")

    dt = Datatoken(ocean.web3, DT_ADDR)
    nft_addr = dt.get_erc721_address()
    nft_addr = ocean.web3.toChecksumAddress(nft_addr)
    print(f"\n=Found=\nnft_addr: {nft_addr}")
    
    did = calcDID(nft_addr, CHAINID)
    print(f"did: {did}")
    print()

# ========================================================================
# utilities


def _exitIfFileExists(filename: str):
    if os.path.exists(filename):
        print(f"\nFile {filename} exists. Exiting.")
        sys.exit(0)


def _createDirIfNeeded(dir_: str):
    if not os.path.exists(dir_):
        print(f"Directory {dir_} did not exist, so created it")
        os.mkdir(dir_)


def _entriesCsvFilename(CSV_DIR) -> str:
    return os.path.join(CSV_DIR, "entries.csv")



# ========================================================================
# main
@enforce_types
def do_main():
    if len(sys.argv) == 1 or sys.argv[1] == "help":
        do_help()

    # main actions
    elif sys.argv[1] == "getentries":
        do_getentries()
    elif sys.argv[1] == "getpreds":
        do_getpreds()
    elif sys.argv[1] == "getnmses":
        do_getnmses()
        
    # helpers
    elif sys.argv[1] == "getdid":
        do_getdid()
    
    else:
        do_help()


if __name__ == "__main__":
    do_main()
