#!/usr/bin/env python
# pylint: disable=too-many-lines
import datetime
import functools
import os
import shutil
import sys

import brownie
import ccxt
from enforce_typing import enforce_types
import glob
import hashlib

from helperfuncs import * #tools from predict-eth repo
from ocean_lib.models.datatoken import Datatoken

CHAINID = 137 # Polygon mainnet - where submissions are

# ========================================================================
HELP_MAIN = f"""predict-eth-judge

Usage: pej getentries|getpreds|getnmses

  pej getentries ST FIN CSV_DIR - query chain, output 1 entries.csv
  pej getpreds CSV_DIR - from 1 entries.csv, output N predvals_DT_ADDRX.csv
  pej getnmses CSV_DIR - from N predvals*.csv, output 1 nmses.csv

  pej getdid DT_ADDR - from datatoken address, output did
"""


@enforce_types
def do_help():
    print(HELP_MAIN)
    sys.exit(0)


# ========================================================================
@enforce_types
def do_getentries():
    HELP = f"""query chain, output entries.csv, which holds datatoken addrs

Usage: pej getentries ST FIN CSV_DIR
  ST -- first block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM
  FIN -- last block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM | latest
  CSV_DIR -- output dir for entries.csv
"""
    if len(sys.argv) not in [2 + 3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getentries"
    ST, FIN = sys.argv[2], sys.argv[3]
    CSV_DIR = sys.argv[4]
    print("pej getentries: Begin")
    print(f"Args: ST={ST}, FIN={FIN}, CSV_DIR={CSV_DIR}")

    # create dir if not exists
    _createDirIfNeeded(CSV_DIR)
    entries_file_name = _entriesCsvFilename(CSV_DIR)
    _exitIfFileExists(entries_file_name)

    # main work
    
    # rng = blockrange.create_range(chain, ST, FIN, NSAMP, SECRET_SEED)
    print("NOTE: this is currently hardcoded, it doesn't actually query")

    # transactions that shared token to judges:
    # https://polygonscan.com/address/0xA54ABd42b11B7C97538CAD7C6A2820419ddF703E#tokentxns

    # hardcoded entries for predict-eth Round 2, due Dec 12 
    # (manually entered via copy & paste from polygonscan)
    dt_addrs = [
        "0xb8187192f79E88eF942E50Ba433B71b6d226D5e1", # Andra Shym 0xD428
        "0xDaFF4387C1aa596370EA6B51316Ea81D5Bd32805", # Andrey Bessalov 0xd732
        "0xd272b173f770dd8e48d30823f0a2952952133f9a", # Hoe Jun Lung 0x21F0
        "0x382d50AC6D24aF9F4A54500eb5861b2BDeb3765C", # Andreea Toma 0xA8FE. 
        #"", # John Wang 0x743c - no datatoken, but gave predictions via github
        # "", # David Lopez 0xeF3D - no datatoken, but gave predictions via github
        # "", # Shikhar Ahuja - no datatoken, but gave predictions via email
	]
    
    save_list(dt_addrs, entries_file_name)

    print(f"pej getentries: Done. There were {len(dt_addrs)} entries")


# ========================================================================


@enforce_types
def do_getpreds():
    HELP = f"""from 1 entries.csv, output predvals_DT_ADDRX.csv

Usage: pej getpreds CSV_DIR
    CSV_DIR -- input & output dir

Transactions are signed with envvar `REMOTE_TEST_PRIVATE_KEY1`, having address {JUDGES_ADDRESS}
"""
    if len(sys.argv) not in [2 + 1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getpreds"
    CSV_DIR = sys.argv[2]
    
    print("pej getpreds: Begin")
    print(f"Args: CSV_DIR={CSV_DIR}")

    # check dir
    if not os.path.exists(CSV_DIR):
        print(f"\nDirectory {CSV_DIR} doesn't exist. Exiting.")
        sys.exit(0)
	
    entries_file_name = _entriesCsvFilename(CSV_DIR)
    if not os.path.exists(entries_file_name):
        print(f"\n File {entries_file_name} doesn't exist. Exiting.")
        sys.exit(0)

    #main work
    ocean = create_ocean_instance()
    alice_wallet = create_alice_wallet(ocean) #you're Alice
    
    dt_addrs = load_list(entries_file_name)
    n = len(dt_addrs)
    print(f"Loaded {n} DT addrs.")
    
    for i, dt_addr in enumerate(dt_addrs):
        print(f"DT #{i+1}/{n}: Begin")
        did = _dtAddrToDid(dt_addr, ocean)
        ddo = ocean.assets.resolve(did)
        assert ddo.did == did
        
        # Alice sends a datatoken to the service, to get access
        order_tx_id = ocean.assets.pay_for_access_service(ddo, alice_wallet)
        print(f"order_tx_id = '{order_tx_id}'")

        # Alice downloads the file
        # If the connection breaks, Alice can request again by showing order_tx_id.
        old_pred_path = ocean.assets.download_asset(
            ddo=ddo,
            consumer_wallet=alice_wallet,
            destination='./',
            order_tx_id=order_tx_id
        )        
        old_pred_name = glob.glob(os.path.join(old_pred_path, "*"))[0]
        print(f"old_pred_name={old_pred_name}")
        
        new_pred_name = os.path.join(CSV_DIR, f"predvals_DT_{dt_addr}.csv")
        shutil.copyfile(old_pred_name, new_pred_name)
        print(f"new_pred_name={new_pred_name}")
        
        print(f"Entry #{i+1}/{n}: done")

    print("pej getpreds: Done")


# ========================================================================


@enforce_types
def do_getnmses():
    HELP = f"""From N predvals*.csv, output 1 nmses.csv

Usage: pej getnmses CSV_DIR
  CSV_DIR -- input & output dir
"""
    if len(sys.argv) not in [2+1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getnmses"
    CSV_DIR = sys.argv[2]
    
    print("pej getnmses: Begin")
    print(f"Args: CSV_DIR={CSV_DIR}")

    # check dir
    if not os.path.exists(CSV_DIR):
        print(f"\nDirectory {CSV_DIR} doesn't exist; nor do pred'ns. Exiting.")
        sys.exit(0)
    
    # == main work ==

    # specify target times
    start_dt = datetime.datetime(2022, 12, 12, 5, 00) #2022-month-day12 at 11.00 UTC
    print(f"start_dt is hardcoded to: {start_dt}") # FIXME make not hardcoded
    
    start_dt = round_to_nearest_hour(start_dt) # so that times line up
    print(f"start_dt, rounded to nearest hour is: {start_dt}")
    
    target_uts = target_12h_unixtimes(start_dt)
    print_datetime_info("target times", target_uts)

    #get actual ETH values
    cex_x = ccxt.binance().fetch_ohlcv('ETH/USDT', '1h')
    allcex_uts = [xi[0]/1000 for xi in cex_x]
    allcex_vals = [xi[4] for xi in cex_x]
    #print_datetime_info("CEX data info", allcex_uts)
    cex_vals = filter_to_target_uts(target_uts, allcex_uts, allcex_vals)
    print(f"cex ETH price is ${cex_vals[0]} at start_dt of {start_dt}")
    print(f"cex_vals: {cex_vals}")

    pred_names = glob.glob(os.path.join(CSV_DIR, "predvals*.csv"))
    n = len(pred_names)
    for i, pred_name in enumerate(pred_names):
        print("="*60)
        print(f"DT #{i+1}/{n}: Begin")
        
        #get predicted ETH values
        print(f"pred_name: {pred_name}")
        pred_vals = load_list(pred_name)
        print(f"pred_vals: {pred_vals}")

        #calc nmse, plot
        nmse = calc_nmse(cex_vals, pred_vals)
        print(f"NMSE = {nmse:.8f}")
        plot_prices(cex_vals, pred_vals)
        
        print(f"DT #{i+1}/{n}: Done")

    print("pej getnmses: Done")


@enforce_types
def do_getdid():
    HELP = f"""From datatoken address, output did

Usage: pej getdid DT_ADDR
  DT_ADDR -- datatoken address
"""
    if len(sys.argv) not in [2+1]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getdid"
    dt_addr = sys.argv[2]
        
    # main work
    ocean = create_ocean_instance()
    _dtAddrToDid(dt_addr, ocean)

# ========================================================================
# dt_addr -> nft_addr -> did utilities
# adapted from df-py/util/oceanutil.py as of Nov 7, 2022

@enforce_types
def _dtAddrToDid(dt_addr: str, ocean) -> str:
    nft_addr = _dtAddrToNftAddr(dt_addr, ocean)
    did = _nftAddrToDid(nft_addr, CHAINID, ocean)
    print(f"dt_addr={dt_addr}, nft_addr={nft_addr}, did={did}")
    return did

@enforce_types
def _dtAddrToNftAddr(dt_addr: str, ocean) -> str:
    dt_addr = brownie.web3.toChecksumAddress(dt_addr)
    dt = Datatoken(ocean.config_dict, dt_addr)
    nft_addr = dt.getERC721Address()
    return nft_addr

@enforce_types
def _nftAddrToDid(nft_addr: str, chainID: int, ocean) -> str:
    # adapted from ocean.py/ocean_lib/ocean/ocean_assets.py
    nft_addr = brownie.web3.toChecksumAddress(nft_addr)
    did = f"did:op:{create_checksum(nft_addr + str(chainID))}"
    return did

# from ocean.py/ocean_lib/utils/utilities.py
@enforce_types
def create_checksum(text: str) -> str:
    return hashlib.sha256(text.encode("utf-8")).hexdigest()



# ========================================================================
# file utilities

def _exitIfFileExists(filename: str):
    if os.path.exists(filename):
        print(f"\nFile {filename} exists. Exiting.")
        sys.exit(0)


def _createDirIfNeeded(dir_: str):
    if not os.path.exists(dir_):
        print(f"Directory {dir_} did not exist, so created it")
        os.mkdir(dir_)


def _entriesCsvFilename(CSV_DIR) -> str:
    return os.path.join(CSV_DIR, "entries.csv")


# ========================================================================
# main
@enforce_types
def do_main():
    if len(sys.argv) == 1 or sys.argv[1] == "help":
        do_help()

    # main actions
    elif sys.argv[1] == "getentries":
        do_getentries()
    elif sys.argv[1] == "getpreds":
        do_getpreds()
    elif sys.argv[1] == "getnmses":
        do_getnmses()
        
    # helpers
    elif sys.argv[1] == "getdid":
        do_getdid()
    
    else:
        do_help()


if __name__ == "__main__":
    do_main()
